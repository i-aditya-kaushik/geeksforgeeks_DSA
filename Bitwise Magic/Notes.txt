Lecture 1
    1. Bitwise operators work on Binary values
    ... The rest you already know

Lecture 3
    1. Naive Soln: Count Set bits: For eg, 5 can be represented as 101 and the set bits are 3
    The time complexity is Θ(Total number of bits)

    int countset(int n):
    int res = 0
    while(n>0):
        if n%2!=0:
            res++
        n/=2

    2. Brian Kerringan's Algo:
        int countBits(int n):
            int res = 0
            while(n>0):
                n = (n & n-1)
                res++
            return res
    The time complexity is Θ(Set bit count)

    3. LookUp table method for 32 bits
    int table[256]
    void initializer():
        table[0] = 0
        for x in range(256):
            table[i] = (i&1) + table[i/2]
        int count(n):
            int res = table[n & 0xff]
            n = n>>8
            res = res + table[n & 0xff]
            n = n>>8
            res = res + table[n&0xff]
            return res

    The time complexity is Θ(1)

Lecture 4:
    Power of 2:
        1. Naive Soln:
        if n==0:
            return false
        while(n!=1):
            if(n%2 !=0):
                return false
            n/=2
        return true
        2. Brian Kerringan Soln:
            bool isPower2(n):
                if(n==0):
                    return false
                return(n&(n-1)==0)
Lecture 5:
    One Odd Occuring:
        1. Naive Soln:
            for x in range(n):
                count = 0
                for j in range(n):

        2. XOR operator: 
            for x in range(len(arr)):
                res = res^arr[x]
        3. Variation Question:
            1 ^ 2 ^ 3...(n+1) and (arr[0]..arr[n-1])
Lecture: Two Odd Occuring:
    1. Naive Soln:
        The time complexity is Θ(n^2)
        traverse through each element and find x%y
    2. XOR of all the numbers
        Same as earlier but now u will get atleast 2 numbers:
            5^6 
            divide the numbers in 2 groups where
        for x in range(m):
            XOR = XOR ^ arr[i]
        sn = XOR & ~(XOR-1)
        for x in range(n):
            if(arr[i] &sn) !=0:
                res = res^arr[i]
            else:
                res2 = res2^arr[i]


