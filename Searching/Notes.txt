Searching:
1. Binary Search and problems based on it:
    if array is unsorted:
        go through each of the element and check if n==arr[x]
        Time Complexity: O(N)
    Binary Search: For sorted:
        go for the middle element, if middle>search, then search for middle for the part after the middle part, else previous part
        Time Complexity:log(n)
        Options:
            1. Recursive method
            2. Iterative method
        1. Recursive:
        bool binarySearch(int arr[],int l, int h,int x)
            base case:
                mid = (l+h)/2
                better mid point which wont do overflow:
                    mid = (l+(h-l))/2
            if(arr[mid]==x):
                return mid
            if(arr[mid]>x):
                return(binarySearch(arr,l,mid-1,x))
            else:
                return(binarySearch(arr,mid+1,h,x))
        2. Iterative:
            Simple Looping
    Get the first occurence of x using binary search
        if(arr[mid]==x and (mid==0 or arr[mid-1]!=x)):
            return mid
    Get the number of occurences of x using binarySearch
        Time Complexity: O(logn+k) where k is occurences.
    

